-- Generated by Oracle SQL Developer Data Modeler 3.0.0.665
--   at:        2012-08-25 17:46:36 CST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g




--  ERROR: Tablespace EXAMPLE has no data files defined 

--  ERROR: Tablespace USERS has no data files defined 
CREATE USER HR 
    IDENTIFIED BY  
    PROFILE DEFAULT 
    ACCOUNT UNLOCK 
;

GRANT CREATE VIEW, UNLIMITED TABLESPACE, CREATE DATABASE LINK, CREATE SEQUENCE, CREATE SESSION, ALTER SESSION, CREATE SYNONYM TO HR 
;

CREATE USER OE 
    IDENTIFIED BY  
    PROFILE DEFAULT 
    ACCOUNT UNLOCK 
;

GRANT QUERY REWRITE, UNLIMITED TABLESPACE, CREATE SYNONYM, CREATE MATERIALIZED VIEW, CREATE DATABASE LINK, CREATE VIEW, CREATE SESSION TO OE 
;

CREATE USER SYS 
    IDENTIFIED BY  
    ACCOUNT UNLOCK 
;



CREATE OR REPLACE TYPE OE.CATEGORY_TYP 
;
/




CREATE OR REPLACE TYPE OE.CORPORATE_CUSTOMER_TYP 
;
/




CREATE OR REPLACE TYPE OE.CUSTOMER_TYP 
;
/




CREATE OR REPLACE TYPE OE.CUST_ADDRESS_TYP 
;
/




CREATE OR REPLACE TYPE OE.INVENTORY_TYP 
;
/




CREATE OR REPLACE TYPE OE.ORDER_TYP 
;
/




CREATE OR REPLACE TYPE OE.PRODUCT_INFORMATION_TYP 
;
/




CREATE OR REPLACE TYPE OE.WAREHOUSE_TYP 
;
/




CREATE OR REPLACE TYPE OE.INVENTORY_LIST_TYP 
    IS TABLE OF INVENTORY_TYP 
;
/




CREATE OR REPLACE TYPE OE.ORDER_ITEM_LIST_TYP 
    IS TABLE OF UNKNOWN 
;
/




CREATE OR REPLACE TYPE OE.ORDER_LIST_TYP 
    IS TABLE OF ORDER_TYP 
;
/




CREATE OR REPLACE TYPE OE.PHONE_LIST_TYP 
    IS VARRAY ( 5 ) OF VARCHAR2 (25) 
;
/




CREATE OR REPLACE TYPE OE.CATEGORY_TYP 
    AS OBJECT 
    ( 
        CATEGORY_NAME VARCHAR2 (50) , 
        CATEGORY_DESCRIPTION VARCHAR2 (1000) , 
        CATEGORY_ID NUMBER (2) , 
        PARENT_CATEGORY_ID NUMBER (2) , 
        MEMBER FUNCTION CATEGORY_DESCRIBE 
        RETURN VARCHAR2 
    ) NOT FINAL 
;
/



CREATE OR REPLACE TYPE BODY OE.CATEGORY_TYP 
    AS 
    MEMBER FUNCTION CATEGORY_DESCRIBE 
    RETURN VARCHAR 
    AS 
    -- Empty PL/SQL Body 
    END 
;
/




CREATE OR REPLACE TYPE OE.CORPORATE_CUSTOMER_TYP 
    UNDER CUSTOMER_TYP ( 
        ACCOUNT_MGR_ID NUMBER (6) 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.CUSTOMER_TYP 
    AS OBJECT 
    ( 
        CUSTOMER_ID NUMBER (6) , 
        CUST_FIRST_NAME VARCHAR2 (20) , 
        CUST_LAST_NAME VARCHAR2 (20) , 
        CUST_ADDRESS CUST_ADDRESS_TYP , 
        PHONE_NUMBERS PHONE_LIST_TYP , 
        NLS_LANGUAGE VARCHAR2 (3) , 
        NLS_TERRITORY VARCHAR2 (30) , 
        CREDIT_LIMIT NUMBER (9,2) , 
        CUST_EMAIL VARCHAR2 (30) , 
        CUST_ORDERS ORDER_LIST_TYP 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.CUST_ADDRESS_TYP 
    AS OBJECT 
    ( 
        STREET_ADDRESS VARCHAR2 (40) , 
        POSTAL_CODE VARCHAR2 (10) , 
        CITY VARCHAR2 (30) , 
        STATE_PROVINCE VARCHAR2 (10) , 
        COUNTRY_ID CHAR (2) 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.INVENTORY_TYP 
    AS OBJECT 
    ( 
        PRODUCT_ID NUMBER (6) , 
        WAREHOUSE WAREHOUSE_TYP , 
        QUANTITY_ON_HAND NUMBER (8) 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.ORDER_TYP 
    AS OBJECT 
    ( 
        ORDER_ID NUMBER (12) , 
        ORDER_MODE VARCHAR2 (8) , 
        CUSTOMER_REF REF CUSTOMER_TYP , 
        ORDER_STATUS NUMBER (2) , 
        ORDER_TOTAL NUMBER (8,2) , 
        SALES_REP_ID NUMBER (6) , 
        ORDER_ITEM_LIST ORDER_ITEM_LIST_TYP 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.PRODUCT_INFORMATION_TYP 
    AS OBJECT 
    ( 
        PRODUCT_ID NUMBER (6) , 
        PRODUCT_NAME VARCHAR2 (50) , 
        PRODUCT_DESCRIPTION VARCHAR2 (2000) , 
        CATEGORY_ID NUMBER (2) , 
        WEIGHT_CLASS NUMBER (1) , 
        WARRANTY_PERIOD INTERVAL YEAR TO MONTH , 
        SUPPLIER_ID NUMBER (6) , 
        PRODUCT_STATUS VARCHAR2 (20) , 
        LIST_PRICE NUMBER (8,2) , 
        MIN_PRICE NUMBER (8,2) , 
        CATALOG_URL VARCHAR2 (50) , 
        INVENTORY_LIST INVENTORY_LIST_TYP 
    ) NOT FINAL 
;
/




CREATE OR REPLACE TYPE OE.WAREHOUSE_TYP 
    AS OBJECT 
    ( 
        WAREHOUSE_ID NUMBER (3) , 
        WAREHOUSE_NAME VARCHAR2 (35) , 
        LOCATION_ID NUMBER (4) 
    ) NOT FINAL 
;
/


CREATE TABLE OE.CATEGORIES_TAB 
    OF OE.CATEGORY_TYP 
    SUBSTITUTABLE AT ALL LEVELS 
    ( 
    CONSTRAINT SYS_C009613 PRIMARY KEY ( CATEGORY_ID ) 
    ) 
    OBJECT IDENTIFIER IS PRIMARY KEY 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE USERS 
        LOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;




CREATE TABLE HR.COUNTRIES 
    ( 
     COUNTRY_ID CHAR (2 BYTE) 
     CONSTRAINT COUNTRY_ID_NN NOT NULL , 
     COUNTRY_NAME VARCHAR2 (40 BYTE) , 
     REGION_ID NUMBER , 
     CONSTRAINT COUNTRY_C_ID_PK PRIMARY KEY ( COUNTRY_ID ) 
    ) 
    ORGANIZATION INDEX 
        LOGGING 
;



COMMENT ON TABLE HR.COUNTRIES IS 'country table. Contains 25 rows. References with locations table.'
;

COMMENT ON COLUMN HR.COUNTRIES.COUNTRY_ID IS 'Primary key of countries table.' 
;

COMMENT ON COLUMN HR.COUNTRIES.COUNTRY_NAME IS 'Country name' 
;

COMMENT ON COLUMN HR.COUNTRIES.REGION_ID IS 'Region ID for the country. Foreign key to region_id column in the departments table.' 
;


CREATE TABLE OE.CUSTOMERS 
    ( 
     CUSTOMER_ID NUMBER (6)  NOT NULL , 
     CUST_FIRST_NAME VARCHAR2 (20 BYTE) 
     CONSTRAINT CUST_FNAME_NN NOT NULL , 
     CUST_LAST_NAME VARCHAR2 (20 BYTE) 
     CONSTRAINT CUST_LNAME_NN NOT NULL , 
     CUST_ADDRESS OE.CUST_ADDRESS_TYP , 
     PHONE_NUMBERS OE.PHONE_LIST_TYP , 
     NLS_LANGUAGE VARCHAR2 (3 BYTE) , 
     NLS_TERRITORY VARCHAR2 (30 BYTE) , 
     CREDIT_LIMIT NUMBER (9,2) , 
     CUST_EMAIL VARCHAR2 (30 BYTE) , 
     ACCOUNT_MGR_ID NUMBER (6) , 
     CUST_GEO_LOCATION MDSYS.SDO_GEOMETRY , 
     DATE_OF_BIRTH DATE , 
     MARITAL_STATUS VARCHAR2 (20 BYTE) , 
     GENDER VARCHAR2 (1 BYTE) , 
     INCOME_LEVEL VARCHAR2 (20 BYTE) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE OE.CUSTOMERS 
    ADD CONSTRAINT CUSTOMER_ID_MIN 
    CHECK ( customer_id > 0) 
;


ALTER TABLE OE.CUSTOMERS 
    ADD CONSTRAINT CUSTOMER_CREDIT_LIMIT_MAX 
    CHECK ( credit_limit <= 5000) 
;


COMMENT ON TABLE OE.CUSTOMERS IS 'Contains customers data either entered by an employee or by the customer
him/herself over the Web.'
;

COMMENT ON COLUMN OE.CUSTOMERS.CUSTOMER_ID IS 'Primary key column.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.CUST_FIRST_NAME IS 'NOT NULL constraint.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.CUST_LAST_NAME IS 'NOT NULL constraint.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.CUST_ADDRESS IS 'Object column of type address_typ.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.PHONE_NUMBERS IS 'Varray column of type phone_list_typ' 
;

COMMENT ON COLUMN OE.CUSTOMERS.CREDIT_LIMIT IS 'Check constraint.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.ACCOUNT_MGR_ID IS 'References hr.employees.employee_id.' 
;

COMMENT ON COLUMN OE.CUSTOMERS.CUST_GEO_LOCATION IS 'SDO (spatial) column.' 
;
CREATE INDEX OE.CUST_UPPER_NAME_IX ON OE.CUSTOMERS 
    ( 
     UPPER("CUST_LAST_NAME"),UPPER("CUST_FIRST_NAME")
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.CUST_ACCOUNT_MANAGER_IX ON OE.CUSTOMERS 
    ( 
     ACCOUNT_MGR_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.CUST_LNAME_IX ON OE.CUSTOMERS 
    ( 
     CUST_LAST_NAME ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.CUST_EMAIL_IX ON OE.CUSTOMERS 
    ( 
     CUST_EMAIL ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.CUSTOMERS 
    ADD CONSTRAINT CUSTOMERS_PK PRIMARY KEY ( CUSTOMER_ID ) ;


CREATE TABLE HR.DEPARTMENTS 
    ( 
     DEPARTMENT_ID NUMBER (4)  NOT NULL , 
     DEPARTMENT_NAME VARCHAR2 (30 BYTE) 
     CONSTRAINT DEPT_NAME_NN NOT NULL , 
     MANAGER_ID NUMBER (6) , 
     LOCATION_ID NUMBER (4) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE HR.DEPARTMENTS IS 'Departments table that shows details of departments where employees
work. Contains 27 rows; references with locations, employees, and job_history tables.'
;

COMMENT ON COLUMN HR.DEPARTMENTS.DEPARTMENT_ID IS 'Primary key column of departments table.' 
;

COMMENT ON COLUMN HR.DEPARTMENTS.DEPARTMENT_NAME IS 'A not null column that shows name of a department. Administration,
Marketing, Purchasing, Human Resources, Shipping, IT, Executive, Public
Relations, Sales, Finance, and Accounting. ' 
;

COMMENT ON COLUMN HR.DEPARTMENTS.MANAGER_ID IS 'Manager_id of a department. Foreign key to employee_id column of employees table. The manager_id column of the employee table references this column.' 
;

COMMENT ON COLUMN HR.DEPARTMENTS.LOCATION_ID IS 'Location id where a department is located. Foreign key to location_id column of locations table.' 
;
CREATE INDEX HR.DEPT_LOCATION_IX ON HR.DEPARTMENTS 
    ( 
     LOCATION_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE HR.DEPARTMENTS 
    ADD CONSTRAINT DEPT_ID_PK PRIMARY KEY ( DEPARTMENT_ID ) ;


CREATE TABLE HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID NUMBER (6)  NOT NULL , 
     FIRST_NAME VARCHAR2 (20 BYTE) , 
     LAST_NAME VARCHAR2 (25 BYTE) 
     CONSTRAINT EMP_LAST_NAME_NN NOT NULL , 
     EMAIL VARCHAR2 (25 BYTE) 
     CONSTRAINT EMP_EMAIL_NN NOT NULL , 
     PHONE_NUMBER VARCHAR2 (20 BYTE) , 
     HIRE_DATE DATE 
     CONSTRAINT EMP_HIRE_DATE_NN NOT NULL , 
     JOB_ID VARCHAR2 (10 BYTE) 
     CONSTRAINT EMP_JOB_NN NOT NULL , 
     SALARY NUMBER (8,2) , 
     COMMISSION_PCT NUMBER (2,2) , 
     MANAGER_ID NUMBER (6) , 
     DEPARTMENT_ID NUMBER (4) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_SALARY_MIN 
    CHECK ( salary > 0) 
;


COMMENT ON TABLE HR.EMPLOYEES IS 'employees table. Contains 107 rows. References with departments,
jobs, job_history tables. Contains a self reference.'
;

COMMENT ON COLUMN HR.EMPLOYEES.EMPLOYEE_ID IS 'Primary key of employees table.' 
;

COMMENT ON COLUMN HR.EMPLOYEES.FIRST_NAME IS 'First name of the employee. A not null column.' 
;

COMMENT ON COLUMN HR.EMPLOYEES.LAST_NAME IS 'Last name of the employee. A not null column.' 
;

COMMENT ON COLUMN HR.EMPLOYEES.EMAIL IS 'Email id of the employee' 
;

COMMENT ON COLUMN HR.EMPLOYEES.PHONE_NUMBER IS 'Phone number of the employee; includes country code and area code' 
;

COMMENT ON COLUMN HR.EMPLOYEES.HIRE_DATE IS 'Date when the employee started on this job. A not null column.' 
;

COMMENT ON COLUMN HR.EMPLOYEES.JOB_ID IS 'Current job of the employee; foreign key to job_id column of the
jobs table. A not null column.' 
;

COMMENT ON COLUMN HR.EMPLOYEES.SALARY IS 'Monthly salary of the employee. Must be greater
than zero (enforced by constraint emp_salary_min)' 
;

COMMENT ON COLUMN HR.EMPLOYEES.COMMISSION_PCT IS 'Commission percentage of the employee; Only employees in sales
department elgible for commission percentage' 
;

COMMENT ON COLUMN HR.EMPLOYEES.MANAGER_ID IS 'Manager id of the employee; has same domain as manager_id in
departments table. Foreign key to employee_id column of employees table.
(useful for reflexive joins and CONNECT BY query)' 
;

COMMENT ON COLUMN HR.EMPLOYEES.DEPARTMENT_ID IS 'Department id where employee works; foreign key to department_id
column of the departments table' 
;
CREATE INDEX HR.EMP_DEPARTMENT_IX ON HR.EMPLOYEES 
    ( 
     DEPARTMENT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.EMP_JOB_IX ON HR.EMPLOYEES 
    ( 
     JOB_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.EMP_MANAGER_IX ON HR.EMPLOYEES 
    ( 
     MANAGER_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.EMP_NAME_IX ON HR.EMPLOYEES 
    ( 
     LAST_NAME ASC , 
     FIRST_NAME ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_EMP_ID_PK PRIMARY KEY ( EMPLOYEE_ID ) ;

ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_EMAIL_UK UNIQUE ( EMAIL ) ;


CREATE TABLE OE.INVENTORIES 
    ( 
     PRODUCT_ID NUMBER (6)  NOT NULL , 
     WAREHOUSE_ID NUMBER (3) 
     CONSTRAINT INVENTORY_WAREHOUSE_ID_NN NOT NULL , 
     QUANTITY_ON_HAND NUMBER (8) 
     CONSTRAINT INVENTORY_QOH_NN NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE OE.INVENTORIES IS 'Tracks availability of products by product_it and warehouse_id.'
;

COMMENT ON COLUMN OE.INVENTORIES.PRODUCT_ID IS 'Part of concatenated primary key, references product_information.product_id.' 
;

COMMENT ON COLUMN OE.INVENTORIES.WAREHOUSE_ID IS 'Part of concatenated primary key, references warehouses.warehouse_id.' 
;
CREATE INDEX OE.INVENTORY_IX ON OE.INVENTORIES 
    ( 
     WAREHOUSE_ID ASC , 
     PRODUCT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.INV_PRODUCT_IX ON OE.INVENTORIES 
    ( 
     PRODUCT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.INVENTORIES 
    ADD CONSTRAINT INVENTORY_PK PRIMARY KEY ( PRODUCT_ID, WAREHOUSE_ID ) ;


CREATE TABLE HR.JOBS 
    ( 
     JOB_ID VARCHAR2 (10 BYTE)  NOT NULL , 
     JOB_TITLE VARCHAR2 (35 BYTE) 
     CONSTRAINT JOB_TITLE_NN NOT NULL , 
     MIN_SALARY NUMBER (6) , 
     MAX_SALARY NUMBER (6) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE HR.JOBS IS 'jobs table with job titles and salary ranges. Contains 19 rows.
References with employees and job_history table.'
;

COMMENT ON COLUMN HR.JOBS.JOB_ID IS 'Primary key of jobs table.' 
;

COMMENT ON COLUMN HR.JOBS.JOB_TITLE IS 'A not null column that shows job title, e.g. AD_VP, FI_ACCOUNTANT' 
;

COMMENT ON COLUMN HR.JOBS.MIN_SALARY IS 'Minimum salary for a job title.' 
;

COMMENT ON COLUMN HR.JOBS.MAX_SALARY IS 'Maximum salary for a job title' 
;

ALTER TABLE HR.JOBS 
    ADD CONSTRAINT JOB_ID_PK PRIMARY KEY ( JOB_ID ) ;


CREATE TABLE HR.JOB_HISTORY 
    ( 
     EMPLOYEE_ID NUMBER (6) 
     CONSTRAINT JHIST_EMPLOYEE_NN NOT NULL , 
     START_DATE DATE 
     CONSTRAINT JHIST_START_DATE_NN NOT NULL , 
     END_DATE DATE 
     CONSTRAINT JHIST_END_DATE_NN NOT NULL , 
     JOB_ID VARCHAR2 (10 BYTE) 
     CONSTRAINT JHIST_JOB_NN NOT NULL , 
     DEPARTMENT_ID NUMBER (4) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE HR.JOB_HISTORY 
    ADD CONSTRAINT JHIST_DATE_INTERVAL 
    CHECK (end_date > start_date)
        INITIALLY IMMEDIATE 
        ENABLE 
        VALIDATE 
;


COMMENT ON TABLE HR.JOB_HISTORY IS 'Table that stores job history of the employees. If an employee
changes departments within the job or changes jobs within the department,
new rows get inserted into this table with old job information of the
employee. Contains a complex primary key: employee_id+start_date.
Contains 25 rows. References with jobs, employees, and departments tables.'
;

COMMENT ON COLUMN HR.JOB_HISTORY.EMPLOYEE_ID IS 'A not null column in the complex primary key employee_id+start_date.
Foreign key to employee_id column of the employee table' 
;

COMMENT ON COLUMN HR.JOB_HISTORY.START_DATE IS 'A not null column in the complex primary key employee_id+start_date.
Must be less than the end_date of the job_history table. (enforced by
constraint jhist_date_interval)' 
;

COMMENT ON COLUMN HR.JOB_HISTORY.END_DATE IS 'Last day of the employee in this job role. A not null column. Must be
greater than the start_date of the job_history table.
(enforced by constraint jhist_date_interval)' 
;

COMMENT ON COLUMN HR.JOB_HISTORY.JOB_ID IS 'Job role in which the employee worked in the past; foreign key to
job_id column in the jobs table. A not null column.' 
;

COMMENT ON COLUMN HR.JOB_HISTORY.DEPARTMENT_ID IS 'Department id in which the employee worked in the past; foreign key to deparment_id column in the departments table' 
;
CREATE INDEX HR.JHIST_JOB_IX ON HR.JOB_HISTORY 
    ( 
     JOB_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.JHIST_EMPLOYEE_IX ON HR.JOB_HISTORY 
    ( 
     EMPLOYEE_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.JHIST_DEPARTMENT_IX ON HR.JOB_HISTORY 
    ( 
     DEPARTMENT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE HR.JOB_HISTORY 
    ADD CONSTRAINT JHIST_EMP_ID_ST_DATE_PK PRIMARY KEY ( EMPLOYEE_ID, START_DATE ) ;


CREATE TABLE HR.LOCATIONS 
    ( 
     LOCATION_ID NUMBER (4)  NOT NULL , 
     STREET_ADDRESS VARCHAR2 (40 BYTE) , 
     POSTAL_CODE VARCHAR2 (12 BYTE) , 
     CITY VARCHAR2 (30 BYTE) 
     CONSTRAINT LOC_CITY_NN NOT NULL , 
     STATE_PROVINCE VARCHAR2 (25 BYTE) , 
     COUNTRY_ID CHAR (2 BYTE) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE HR.LOCATIONS IS 'Locations table that contains specific address of a specific office,
warehouse, and/or production site of a company. Does not store addresses /
locations of customers. Contains 23 rows; references with the
departments and countries tables. '
;

COMMENT ON COLUMN HR.LOCATIONS.LOCATION_ID IS 'Primary key of locations table' 
;

COMMENT ON COLUMN HR.LOCATIONS.STREET_ADDRESS IS 'Street address of an office, warehouse, or production site of a company.
Contains building number and street name' 
;

COMMENT ON COLUMN HR.LOCATIONS.POSTAL_CODE IS 'Postal code of the location of an office, warehouse, or production site
of a company. ' 
;

COMMENT ON COLUMN HR.LOCATIONS.CITY IS 'A not null column that shows city where an office, warehouse, or
production site of a company is located. ' 
;

COMMENT ON COLUMN HR.LOCATIONS.STATE_PROVINCE IS 'State or Province where an office, warehouse, or production site of a
company is located.' 
;

COMMENT ON COLUMN HR.LOCATIONS.COUNTRY_ID IS 'Country where an office, warehouse, or production site of a company is
located. Foreign key to country_id column of the countries table.' 
;
CREATE INDEX HR.LOC_CITY_IX ON HR.LOCATIONS 
    ( 
     CITY ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.LOC_STATE_PROVINCE_IX ON HR.LOCATIONS 
    ( 
     STATE_PROVINCE ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX HR.LOC_COUNTRY_IX ON HR.LOCATIONS 
    ( 
     COUNTRY_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE HR.LOCATIONS 
    ADD CONSTRAINT LOC_ID_PK PRIMARY KEY ( LOCATION_ID ) ;


CREATE TABLE OE.ORDERS 
    ( 
     ORDER_ID NUMBER (12)  NOT NULL , 
     ORDER_DATE TIMESTAMP WITH LOCAL TIME ZONE 
     CONSTRAINT ORDER_DATE_NN NOT NULL , 
     ORDER_MODE VARCHAR2 (8 BYTE) , 
     CUSTOMER_ID NUMBER (6) 
     CONSTRAINT ORDER_CUSTOMER_ID_NN NOT NULL , 
     ORDER_STATUS NUMBER (2) , 
     ORDER_TOTAL NUMBER (8,2) , 
     SALES_REP_ID NUMBER (6) , 
     PROMOTION_ID NUMBER (6) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE OE.ORDERS 
    ADD CONSTRAINT ORDER_MODE_LOV 
    CHECK ( order_mode in ('direct','online')) 
;


ALTER TABLE OE.ORDERS 
    ADD CONSTRAINT ORDER_TOTAL_MIN 
    CHECK ( order_total >= 0) 
;


COMMENT ON TABLE OE.ORDERS IS 'Contains orders entered by a salesperson as well as over the Web.'
;

COMMENT ON COLUMN OE.ORDERS.ORDER_ID IS 'PRIMARY KEY column.' 
;

COMMENT ON COLUMN OE.ORDERS.ORDER_DATE IS 'TIMESTAMP WITH LOCAL TIME ZONE column, NOT NULL constraint.' 
;

COMMENT ON COLUMN OE.ORDERS.ORDER_MODE IS 'CHECK constraint.' 
;

COMMENT ON COLUMN OE.ORDERS.ORDER_STATUS IS '0: Not fully entered, 1: Entered, 2: Canceled - bad credit, -
3: Canceled - by customer, 4: Shipped - whole order, -
5: Shipped - replacement items, 6: Shipped - backlog on items, -
7: Shipped - special delivery, 8: Shipped - billed, 9: Shipped - payment plan,-
10: Shipped - paid' 
;

COMMENT ON COLUMN OE.ORDERS.ORDER_TOTAL IS 'CHECK constraint.' 
;

COMMENT ON COLUMN OE.ORDERS.SALES_REP_ID IS 'References hr.employees.employee_id.' 
;

COMMENT ON COLUMN OE.ORDERS.PROMOTION_ID IS 'Sales promotion ID. Used in SH schema' 
;
CREATE INDEX OE.ORD_SALES_REP_IX ON OE.ORDERS 
    ( 
     SALES_REP_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.ORD_CUSTOMER_IX ON OE.ORDERS 
    ( 
     CUSTOMER_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.ORD_ORDER_DATE_IX ON OE.ORDERS 
    ( 
     ORDER_DATE ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.ORDERS 
    ADD CONSTRAINT ORDER_PK PRIMARY KEY ( ORDER_ID ) ;


CREATE TABLE OE.ORDER_ITEMS 
    ( 
     ORDER_ID NUMBER (12)  NOT NULL , 
     LINE_ITEM_ID NUMBER (3)  NOT NULL , 
     PRODUCT_ID NUMBER (6)  NOT NULL , 
     UNIT_PRICE NUMBER (8,2) , 
     QUANTITY NUMBER (8) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE OE.ORDER_ITEMS IS 'Example of many-to-many resolution.'
;

COMMENT ON COLUMN OE.ORDER_ITEMS.ORDER_ID IS 'Part of concatenated primary key, references orders.order_id.' 
;

COMMENT ON COLUMN OE.ORDER_ITEMS.LINE_ITEM_ID IS 'Part of concatenated primary key.' 
;

COMMENT ON COLUMN OE.ORDER_ITEMS.PRODUCT_ID IS 'References product_information.product_id.' 
;
CREATE UNIQUE INDEX OE.ORDER_ITEMS_UK ON OE.ORDER_ITEMS 
    ( 
     ORDER_ID ASC , 
     PRODUCT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.ITEM_ORDER_IX ON OE.ORDER_ITEMS 
    ( 
     ORDER_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.ITEM_PRODUCT_IX ON OE.ORDER_ITEMS 
    ( 
     PRODUCT_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.ORDER_ITEMS 
    ADD CONSTRAINT ORDER_ITEMS_PK PRIMARY KEY ( ORDER_ID, LINE_ITEM_ID ) ;


CREATE TABLE OE.PRODUCT_DESCRIPTIONS 
    ( 
     PRODUCT_ID NUMBER (6)  NOT NULL , 
     LANGUAGE_ID VARCHAR2 (3 BYTE)  NOT NULL , 
     TRANSLATED_NAME NVARCHAR2 (50) 
     CONSTRAINT TRANSLATED_NAME_NN NOT NULL , 
     TRANSLATED_DESCRIPTION NVARCHAR2 (2000) 
     CONSTRAINT TRANSLATED_DESC_NN NOT NULL 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



COMMENT ON TABLE OE.PRODUCT_DESCRIPTIONS IS 'Non-industry-specific design, allows selection of NLS-setting-specific data
derived at runtime, for example using the products view.'
;

COMMENT ON COLUMN OE.PRODUCT_DESCRIPTIONS.PRODUCT_ID IS 'Primary key column.' 
;

COMMENT ON COLUMN OE.PRODUCT_DESCRIPTIONS.LANGUAGE_ID IS 'Primary key column.' 
;
CREATE UNIQUE INDEX OE.PRD_DESC_PK ON OE.PRODUCT_DESCRIPTIONS 
    ( 
     PRODUCT_ID ASC , 
     LANGUAGE_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;
CREATE INDEX OE.PROD_NAME_IX ON OE.PRODUCT_DESCRIPTIONS 
    ( 
     TRANSLATED_NAME ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.PRODUCT_DESCRIPTIONS 
    ADD CONSTRAINT PRODUCT_DESCRIPTIONS_PK PRIMARY KEY ( PRODUCT_ID, LANGUAGE_ID ) 
    USING INDEX OE.PRD_DESC_PK ;


CREATE TABLE OE.PRODUCT_INFORMATION 
    ( 
     PRODUCT_ID NUMBER (6)  NOT NULL , 
     PRODUCT_NAME VARCHAR2 (50 BYTE) , 
     PRODUCT_DESCRIPTION VARCHAR2 (2000 BYTE) , 
     CATEGORY_ID NUMBER (2) , 
     WEIGHT_CLASS NUMBER (1) , 
     WARRANTY_PERIOD INTERVAL YEAR TO MONTH , 
     SUPPLIER_ID NUMBER (6) , 
     PRODUCT_STATUS VARCHAR2 (20 BYTE) , 
     LIST_PRICE NUMBER (8,2) , 
     MIN_PRICE NUMBER (8,2) , 
     CATALOG_URL VARCHAR2 (50 BYTE) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE OE.PRODUCT_INFORMATION 
    ADD CONSTRAINT PRODUCT_STATUS_LOV 
    CHECK ( product_status in ('orderable'
                                                  ,'planned'
                                                  ,'under development'
                                                  ,'obsolete')) 
;


COMMENT ON TABLE OE.PRODUCT_INFORMATION IS 'Non-industry-specific data in various categories.'
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.PRODUCT_ID IS 'Primary key column.' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.PRODUCT_DESCRIPTION IS 'Primary language description corresponding to translated_description in
oe.product_descriptions, added to provide non-NLS text columns for OC views
to accss.' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.CATEGORY_ID IS 'Low cardinality column, can be used for bitmap index.
Schema SH uses it as foreign key' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.WEIGHT_CLASS IS 'Low cardinality column, can be used for bitmap index.' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.WARRANTY_PERIOD IS 'INTERVAL YEAER TO MONTH column, low cardinality, can be used for bitmap
index.' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.SUPPLIER_ID IS 'Offers possibility of extensions outside Common Schema.' 
;

COMMENT ON COLUMN OE.PRODUCT_INFORMATION.PRODUCT_STATUS IS 'Check constraint. Appropriate for complex rules, such as "All products in
status PRODUCTION must have at least one inventory entry." Also appropriate
for a trigger auditing status change.' 
;
CREATE INDEX OE.PROD_SUPPLIER_IX ON OE.PRODUCT_INFORMATION 
    ( 
     SUPPLIER_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.PRODUCT_INFORMATION 
    ADD CONSTRAINT PRODUCT_INFORMATION_PK PRIMARY KEY ( PRODUCT_ID ) ;


CREATE TABLE OE.PROMOTIONS 
    ( 
     PROMO_ID NUMBER (6)  NOT NULL , 
     PROMO_NAME VARCHAR2 (20 BYTE) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE OE.PROMOTIONS 
    ADD CONSTRAINT PROMO_ID_PK PRIMARY KEY ( PROMO_ID ) ;


CREATE TABLE OE.PURCHASEORDER 
    OF SYS.XMLTYPE 
    SUBSTITUTABLE AT ALL LEVELS 
    OBJECT IDENTIFIER IS SYSTEM GENERATED 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE USERS 
        LOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
    LOB ( ""XMLEXTRA"".""NAMESPACES"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLEXTRA"".""EXTRADATA"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLDATA"".""SYS_XDBPD$"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLDATA"".""ACTIONS"".""SYS_XDBPD$"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLDATA"".""REJECTION"".""SYS_XDBPD$"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLDATA"".""SHIPPING_INSTRUCTIONS"".""SYS_XDBPD$"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
    LOB ( ""XMLDATA"".""LINEITEMS"".""SYS_XDBPD$"" ) STORE AS 
        ( 
        TABLESPACE USERS 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        CHUNK 8192 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
;




CREATE TABLE HR.REGIONS 
    ( 
     REGION_ID NUMBER 
     CONSTRAINT REGION_ID_NN NOT NULL , 
     REGION_NAME VARCHAR2 (25 BYTE) 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
;



ALTER TABLE HR.REGIONS 
    ADD CONSTRAINT REG_ID_PK PRIMARY KEY ( REGION_ID ) ;


CREATE TABLE OE.WAREHOUSES 
    ( 
     WAREHOUSE_ID NUMBER (3)  NOT NULL , 
     WAREHOUSE_SPEC XMLTYPE , 
     WAREHOUSE_NAME VARCHAR2 (35 BYTE) , 
     LOCATION_ID NUMBER (4) , 
     WH_GEO_LOCATION MDSYS.SDO_GEOMETRY 
    ) 
        PCTFREE 10 
        PCTUSED 40 
        MAXTRANS 255 
        TABLESPACE EXAMPLE 
        NOLOGGING 
        STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT 
    ) 
    XMLTYPE WAREHOUSE_SPEC STORE AS CLOB 
    ( 
        STORAGE ( 
            PCTINCREASE 0 
            MINEXTENTS 1 
            MAXEXTENTS UNLIMITED 
            FREELISTS 1 
            BUFFER_POOL DEFAULT 
        ) 
        RETENTION 
        ENABLE STORAGE IN ROW
        CACHE 
    ) 
;



COMMENT ON TABLE OE.WAREHOUSES IS 'Warehouse data unspecific to any industry.'
;

COMMENT ON COLUMN OE.WAREHOUSES.WAREHOUSE_ID IS 'Primary key column.' 
;

COMMENT ON COLUMN OE.WAREHOUSES.WH_GEO_LOCATION IS 'Primary key column, references hr.locations.location_id.' 
;
CREATE INDEX OE.WHS_LOCATION_IX ON OE.WAREHOUSES 
    ( 
     LOCATION_ID ASC 
    ) 
    TABLESPACE EXAMPLE 
    PCTFREE 10 
    MAXTRANS 255 
    STORAGE ( 
        INITIAL 65536 
        PCTINCREASE 0 
        MINEXTENTS 1 
        MAXEXTENTS 2147483645 
        FREELISTS 1 
        FREELIST GROUPS 1 
        BUFFER_POOL DEFAULT ) 
    NOLOGGING 
    NOCOMPRESS 
    NOPARALLEL 
;

ALTER TABLE OE.WAREHOUSES 
    ADD CONSTRAINT WAREHOUSES_PK PRIMARY KEY ( WAREHOUSE_ID ) ;



ALTER TABLE HR.COUNTRIES 
    ADD CONSTRAINT COUNTR_REG_FK FOREIGN KEY 
    ( 
     REGION_ID
    ) 
    REFERENCES HR.REGIONS 
    ( 
     REGION_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.CUSTOMERS 
    ADD CONSTRAINT CUSTOMERS_ACCOUNT_MANAGER_FK FOREIGN KEY 
    ( 
     ACCOUNT_MGR_ID
    ) 
    REFERENCES HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    ON DELETE SET NULL 
    NOT DEFERRABLE 
;


ALTER TABLE HR.DEPARTMENTS 
    ADD CONSTRAINT DEPT_LOC_FK FOREIGN KEY 
    ( 
     LOCATION_ID
    ) 
    REFERENCES HR.LOCATIONS 
    ( 
     LOCATION_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.DEPARTMENTS 
    ADD CONSTRAINT DEPT_MGR_FK FOREIGN KEY 
    ( 
     MANAGER_ID
    ) 
    REFERENCES HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_DEPT_FK FOREIGN KEY 
    ( 
     DEPARTMENT_ID
    ) 
    REFERENCES HR.DEPARTMENTS 
    ( 
     DEPARTMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_JOB_FK FOREIGN KEY 
    ( 
     JOB_ID
    ) 
    REFERENCES HR.JOBS 
    ( 
     JOB_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.EMPLOYEES 
    ADD CONSTRAINT EMP_MANAGER_FK FOREIGN KEY 
    ( 
     MANAGER_ID
    ) 
    REFERENCES HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.INVENTORIES 
    ADD CONSTRAINT INVENTORIES_PRODUCT_ID_FK FOREIGN KEY 
    ( 
     PRODUCT_ID
    ) 
    REFERENCES OE.PRODUCT_INFORMATION 
    ( 
     PRODUCT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.INVENTORIES 
    ADD CONSTRAINT INVENTORIES_WAREHOUSES_FK FOREIGN KEY 
    ( 
     WAREHOUSE_ID
    ) 
    REFERENCES OE.WAREHOUSES 
    ( 
     WAREHOUSE_ID
    ) 
    NOT DEFERRABLE NOVALIDATE 
;


ALTER TABLE HR.JOB_HISTORY 
    ADD CONSTRAINT JHIST_DEPT_FK FOREIGN KEY 
    ( 
     DEPARTMENT_ID
    ) 
    REFERENCES HR.DEPARTMENTS 
    ( 
     DEPARTMENT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.JOB_HISTORY 
    ADD CONSTRAINT JHIST_EMP_FK FOREIGN KEY 
    ( 
     EMPLOYEE_ID
    ) 
    REFERENCES HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.JOB_HISTORY 
    ADD CONSTRAINT JHIST_JOB_FK FOREIGN KEY 
    ( 
     JOB_ID
    ) 
    REFERENCES HR.JOBS 
    ( 
     JOB_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE HR.LOCATIONS 
    ADD CONSTRAINT LOC_C_ID_FK FOREIGN KEY 
    ( 
     COUNTRY_ID
    ) 
    REFERENCES HR.COUNTRIES 
    ( 
     COUNTRY_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.ORDERS 
    ADD CONSTRAINT ORDERS_CUSTOMER_ID_FK FOREIGN KEY 
    ( 
     CUSTOMER_ID
    ) 
    REFERENCES OE.CUSTOMERS 
    ( 
     CUSTOMER_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.ORDERS 
    ADD CONSTRAINT ORDERS_SALES_REP_FK FOREIGN KEY 
    ( 
     SALES_REP_ID
    ) 
    REFERENCES HR.EMPLOYEES 
    ( 
     EMPLOYEE_ID
    ) 
    ON DELETE SET NULL 
    NOT DEFERRABLE 
;


ALTER TABLE OE.ORDER_ITEMS 
    ADD CONSTRAINT ORDER_ITEMS_ORDER_ID_FK FOREIGN KEY 
    ( 
     ORDER_ID
    ) 
    REFERENCES OE.ORDERS 
    ( 
     ORDER_ID
    ) 
    ON DELETE CASCADE 
    NOT DEFERRABLE NOVALIDATE 
;


ALTER TABLE OE.ORDER_ITEMS 
    ADD CONSTRAINT ORDER_ITEMS_PRODUCT_ID_FK FOREIGN KEY 
    ( 
     PRODUCT_ID
    ) 
    REFERENCES OE.PRODUCT_INFORMATION 
    ( 
     PRODUCT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.PRODUCT_DESCRIPTIONS 
    ADD CONSTRAINT PD_PRODUCT_ID_FK FOREIGN KEY 
    ( 
     PRODUCT_ID
    ) 
    REFERENCES OE.PRODUCT_INFORMATION 
    ( 
     PRODUCT_ID
    ) 
    NOT DEFERRABLE 
;


ALTER TABLE OE.WAREHOUSES 
    ADD CONSTRAINT WAREHOUSES_LOCATION_FK FOREIGN KEY 
    ( 
     LOCATION_ID
    ) 
    REFERENCES HR.LOCATIONS 
    ( 
     LOCATION_ID
    ) 
    ON DELETE SET NULL 
    NOT DEFERRABLE 
;

CREATE OR REPLACE VIEW OE.ACCOUNT_MANAGERS AS 
SELECT          c.account_mgr_id                ACCT_MGR,
                cr.region_id                    REGION,
                c.cust_address.country_id       COUNTRY,
                c.cust_address.state_province   PROVINCE,
                count(*)                        NUM_CUSTOMERS
FROM            customers c, countries cr
WHERE           c.cust_address.country_id = cr.country_id
GROUP BY ROLLUP (c.account_mgr_id,
                 cr.region_id,
                 c.cust_address.country_id,
                 c.cust_address.state_province) ;



CREATE OR REPLACE VIEW OE.BOMBAY_INVENTORY AS 
SELECT p.product_id
,      p.product_name
,      i.quantity_on_hand
FROM   inventories i
,      warehouses  w
,      products    p
WHERE  p.product_id = i.product_id
AND    i.warehouse_id = w.warehouse_id
AND    w.warehouse_name = 'Bombay' ;



CREATE OR REPLACE VIEW OE.CUSTOMERS_VIEW AS 
SELECT
  c.customer_id,
  c.cust_first_name,
  c.cust_last_name,
  c.cust_address.street_address street_address,
  c.cust_address.postal_code postal_code,
  c.cust_address.city city,
  c.cust_address.state_province state_province,
  co.country_id,
  co.country_name,
  co.region_id,
  c.nls_language,
  c.nls_territory,
  c.credit_limit,
  c.cust_email,
  substr(get_phone_number_f(1,phone_numbers),1,25) Primary_Phone_number,
  substr(get_phone_number_f(2,phone_numbers),1,25) Phone_number_2,
  substr(get_phone_number_f(3,phone_numbers),1,25) Phone_number_3,
  substr(get_phone_number_f(4,phone_numbers),1,25) Phone_number_4,
  substr(get_phone_number_f(5,phone_numbers),1,25) Phone_number_5,
  c.account_mgr_id,
  c.cust_geo_location.sdo_gtype location_gtype,
  c.cust_geo_location.sdo_srid location_srid,
  c.cust_geo_location.sdo_point.x location_x,
  c.cust_geo_location.sdo_point.y location_y,
  c.cust_geo_location.sdo_point.z location_z
FROM
  countries co,
  customers c
WHERE
  c.cust_address.country_id = co.country_id(+) ;



CREATE OR REPLACE VIEW HR.EMP_DETAILS_VIEW AS 
SELECT
  e.employee_id,
  e.job_id,
  e.manager_id,
  e.department_id,
  d.location_id,
  l.country_id,
  e.first_name,
  e.last_name,
  e.salary,
  e.commission_pct,
  d.department_name,
  j.job_title,
  l.city,
  l.state_province,
  c.country_name,
  r.region_name
FROM
  employees e,
  departments d,
  jobs j,
  locations l,
  countries c,
  regions r
WHERE e.department_id = d.department_id
  AND d.location_id = l.location_id
  AND l.country_id = c.country_id
  AND c.region_id = r.region_id
  AND j.job_id = e.job_id
WITH READ ONLY ;



CREATE OR REPLACE VIEW OE.OC_CUSTOMERS 
 OF OE.CUSTOMER_TYP WITH OBJECT IDENTIFIER ( customer_id ) AS 
SELECT c.customer_id, c.cust_first_name, c.cust_last_name, c.cust_address,
           c.phone_numbers,c.nls_language,c.nls_territory,c.credit_limit,
           c.cust_email,
           CAST(MULTISET(SELECT o.order_id, o.order_mode,
                               MAKE_REF(oc_customers,o.customer_id),
                               o.order_status,
                               o.order_total,o.sales_rep_id,
                               CAST(MULTISET(SELECT l.order_id,l.line_item_id,
                                                    l.unit_price,l.quantity,
                                             MAKE_REF(oc_product_information,
                                                      l.product_id)
                                             FROM order_items l
                                             WHERE o.order_id = l.order_id)
                                    AS order_item_list_typ)
                         FROM orders o
                         WHERE c.customer_id = o.customer_id)
                AS order_list_typ)
     FROM customers c ;



CREATE OR REPLACE VIEW OE.OC_INVENTORIES 
 OF OE.INVENTORY_TYP WITH OBJECT IDENTIFIER ( product_id ) AS 
SELECT i.product_id,
           warehouse_typ(w.warehouse_id, w.warehouse_name, w.location_id),
           i.quantity_on_hand
    FROM inventories i, warehouses w
    WHERE i.warehouse_id=w.warehouse_id ;



CREATE OR REPLACE VIEW OE.OC_ORDERS 
 OF OE.ORDER_TYP WITH OBJECT IDENTIFIER ( order_id ) AS 
SELECT o.order_id, o.order_mode,MAKE_REF(oc_customers,o.customer_id),
        o.order_status,o.order_total,o.sales_rep_id,
       CAST(MULTISET(SELECT l.order_id,l.line_item_id,l.unit_price,l.quantity,
                       make_ref(oc_product_information,l.product_id)
                     FROM order_items l
                     WHERE o.order_id = l.order_id)
            AS order_item_list_typ)
    FROM orders o ;



CREATE OR REPLACE VIEW OE.OC_PRODUCT_INFORMATION 
 OF OE.PRODUCT_INFORMATION_TYP WITH OBJECT IDENTIFIER ( product_id ) AS 
SELECT p.product_id, p.product_name, p.product_description, p.category_id,
           p.weight_class, p.warranty_period, p.supplier_id, p.product_status,
           p.list_price, p.min_price, p.catalog_url,
           CAST(MULTISET(SELECT i.product_id,i.warehouse,i.quantity_on_hand
                         FROM oc_inventories i
                         WHERE p.product_id=i.product_id)
                AS inventory_list_typ)
    FROM product_information p ;



CREATE OR REPLACE VIEW OE.ORDERS_VIEW AS 
SELECT
  order_id,
  TO_DATE(TO_CHAR(order_date,'DD-MON-YY HH:MI:SS'),'DD-MON-YY HH:MI:SS') ORDER_DATE,
  order_mode,
  customer_id,
  order_status,
  order_total,
  sales_rep_id,
  promotion_id
FROM orders ;



CREATE OR REPLACE VIEW OE.PRODUCTS AS 
SELECT i.product_id
,      d.language_id
,      CASE WHEN d.language_id IS NOT NULL
            THEN d.translated_name
            ELSE TRANSLATE(i.product_name USING NCHAR_CS)
       END    AS product_name
,      i.category_id
,      CASE WHEN d.language_id IS NOT NULL
            THEN d.translated_description
            ELSE TRANSLATE(i.product_description USING NCHAR_CS)
       END    AS product_description
,      i.weight_class
,      i.warranty_period
,      i.supplier_id
,      i.product_status
,      i.list_price
,      i.min_price
,      i.catalog_url
FROM   product_information  i
,      product_descriptions d
WHERE  d.product_id  (+) = i.product_id
AND    d.language_id (+) = sys_context('USERENV','LANG') ;



CREATE OR REPLACE VIEW OE.PRODUCT_PRICES AS 
SELECT category_id
,      COUNT(*)        as "#_OF_PRODUCTS"
,      MIN(list_price) as low_price
,      MAX(list_price) as high_price
FROM   product_information
GROUP BY category_id ;



CREATE OR REPLACE VIEW OE.SYDNEY_INVENTORY AS 
SELECT p.product_id
,      p.product_name
,      i.quantity_on_hand
FROM   inventories i
,      warehouses  w
,      products    p
WHERE  p.product_id = i.product_id
AND    i.warehouse_id = w.warehouse_id
AND    w.warehouse_name = 'Sydney' ;



CREATE OR REPLACE VIEW OE.TORONTO_INVENTORY AS 
SELECT p.product_id
,      p.product_name
,      i.quantity_on_hand
FROM   inventories i
,      warehouses  w
,      products    p
WHERE  p.product_id = i.product_id
AND    i.warehouse_id = w.warehouse_id
AND    w.warehouse_name = 'Toronto' ;



CREATE OR REPLACE VIEW OE.OC_CORPORATE_CUSTOMERS 
 OF OE.CORPORATE_CUSTOMER_TYP UNDER OE.OC_CUSTOMERS AS 
SELECT c.customer_id, c.cust_first_name, c.cust_last_name,
              c.cust_address, c.phone_numbers,c.nls_language,c.nls_territory,
              c.credit_limit, c.cust_email,
              CAST(MULTISET(SELECT o.order_id, o.order_mode,
                               MAKE_REF(oc_customers,o.customer_id),
                               o.order_status,
                               o.order_total,o.sales_rep_id,
                               CAST(MULTISET(SELECT l.order_id,l.line_item_id,
                                         l.unit_price,l.quantity,
                                         make_ref(oc_product_information,
                                                    l.product_id)
                                             FROM order_items l
                                             WHERE o.order_id = l.order_id)
                                    AS order_item_list_typ)
                            FROM orders o
                            WHERE c.customer_id = o.customer_id)
              AS order_list_typ), c.account_mgr_id
     FROM customers c ;



CREATE SEQUENCE HR.DEPARTMENTS_SEQ 
    INCREMENT BY 10 
    MAXVALUE 9990 
    MINVALUE 1 
    NOCACHE 
;

CREATE SEQUENCE HR.EMPLOYEES_SEQ 
    INCREMENT BY 1 
    MAXVALUE 999999999999999999999999999 
    MINVALUE 1 
    NOCACHE 
;

CREATE SEQUENCE HR.LOCATIONS_SEQ 
    INCREMENT BY 100 
    MAXVALUE 9900 
    MINVALUE 1 
    NOCACHE 
;

CREATE SEQUENCE OE.ORDERS_SEQ 
    INCREMENT BY 1 
    MAXVALUE 999999999999999999999999999 
    MINVALUE 1 
    NOCACHE 
;

CREATE OR REPLACE TRIGGER OE.INSERT_ORD_LINE 
    BEFORE INSERT ON OE.ORDER_ITEMS 
    FOR EACH ROW 
DECLARE
    new_line number;
  BEGIN
    SELECT (NVL(MAX(line_item_id),0)+1) INTO new_line
      FROM order_items
      WHERE order_id = :new.order_id;
    :new.line_item_id := new_line;
  END; 
/


CREATE OR REPLACE TRIGGER OE.ORDERS_ITEMS_TRG 
    INSTEAD OF INSERT ON OE.OC_ORDERS 
    FOR EACH ROW 
DECLARE
    prod  product_information_typ;
BEGIN
    SELECT DEREF(:NEW.product_ref) INTO prod FROM DUAL;
    INSERT INTO order_items VALUES (prod.product_id, :NEW.order_id,
                                    :NEW.line_item_id, :NEW.unit_price,
                                    :NEW.quantity);
END; 
/


CREATE OR REPLACE TRIGGER OE.ORDERS_TRG 
    INSTEAD OF INSERT ON OE.OC_ORDERS 
    FOR EACH ROW 
BEGIN
   INSERT INTO ORDERS (order_id, order_mode, order_total,
                       sales_rep_id, order_status)
               VALUES (:NEW.order_id, :NEW.order_mode,
                       :NEW.order_total, :NEW.sales_rep_id,
                       :NEW.order_status);
END; 
/


CREATE OR REPLACE TRIGGER OE.PURCHASEORDER$xd 
    AFTER UPDATE OR DELETE ON OE.PURCHASEORDER 
    FOR EACH ROW 
BEGIN  IF (deleting) THEN xdb.xdb_pitrig_pkg.pitrig_del('OE','PURCHASEORDER', :old.sys_nc_oid$, 'C7D922F90DB52BCEE040007F010022BE' ); END IF;   IF (updating) THEN xdb.xdb_pitrig_pkg.pitrig_upd('OE','PURCHASEORDER', :old.sys_nc_oid$, 'C7D922F90DB52BCEE040007F010022BE', user ); END IF; END; 
/


CREATE OR REPLACE TRIGGER HR.SECURE_EMPLOYEES 
    BEFORE INSERT OR UPDATE OR DELETE ON HR.EMPLOYEES 
    FOR EACH ROW 
BEGIN
  secure_dml;
END secure_employees; 
/


CREATE OR REPLACE TRIGGER HR.UPDATE_JOB_HISTORY 
    AFTER UPDATE OF JOB_ID, DEPARTMENT_ID ON HR.EMPLOYEES 
    FOR EACH ROW 
BEGIN
  add_job_history(:old.employee_id, :old.hire_date, sysdate,
                  :old.job_id, :old.department_id);
END; 
/



CREATE OR REPLACE PROCEDURE HR.add_job_history
  (  p_emp_id          job_history.employee_id%type
   , p_start_date      job_history.start_date%type
   , p_end_date        job_history.end_date%type
   , p_job_id          job_history.job_id%type
   , p_department_id   job_history.department_id%type
   )
IS
BEGIN
  INSERT INTO job_history (employee_id, start_date, end_date,
                           job_id, department_id)
    VALUES(p_emp_id, p_start_date, p_end_date, p_job_id, p_department_id);
END add_job_history;
/

CREATE OR REPLACE PROCEDURE HR.secure_dml
IS
BEGIN
  IF TO_CHAR (SYSDATE, 'HH24:MI') NOT BETWEEN '08:00' AND '18:00'
        OR TO_CHAR (SYSDATE, 'DY') IN ('SAT', 'SUN') THEN
	RAISE_APPLICATION_ERROR (-20205,
		'You may only make changes during normal office hours');
  END IF;
END secure_dml;
/

































-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            17
-- CREATE INDEX                            27
-- ALTER TABLE                             41
-- CREATE VIEW                             14
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         2
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           6
-- CREATE STRUCTURED TYPE                   8
-- CREATE COLLECTION TYPE                   4
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          4
-- CREATE MATERIALIZED VIEW                 0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              3
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- ERRORS                                   2
-- WARNINGS                                 0
